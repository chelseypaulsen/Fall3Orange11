df_ML = read.csv('C:\\Users\\Steven\\Documents\\MSA\\Analytics Foundations\\Machine Learning\\data')
#df_ML = read.csv('C:\\Users\\jlmic\\Documents\\Machine Learning\\Data\\MLProjectData.csv')
df_ML = read.csv('C:\\Users\\Steven\\Documents\\MSA\\Analytics Foundations\\Machine Learning\\data\\MLProjectData.csv')
View(df_ML)
str(df_ML)
library(caret)
set.seed(8) # The greatest number there ever was
intrain<-createDataPartition(y=df_ML$target,p=0.7,list=FALSE)
df_ML_train<-df_ML[intrain,]
df_ML_validate<-df_ML[-intrain,]
dim(df_ML_train)
dim(df_ML_validate)
View(df_ML_train)
summary(df_ML_train$target)
load("C:/Users/Steven/Documents/MSA/Analytics Foundations/Machine Learning/data/MLProjectData.RData")
View(MLProjectData)
4447+1903
hist(df_ML_train)
hist(df_ML_train$num29)
ggplot(df_ML_train) +
geom_histogram(x=num29, aes(color= cat13))
ggplot(df_ML_train) +
+ geom_histogram(x=num29, aes(color= cat13))
ggplot(df_ML_train) +
+ geom_histogram(aes(x=num29, color= cat13))
ggplot(df_ML_train) +
+ geom_histogram(aes(x=num29, color= cat13))
ggplot(df_ML_train) +
geom_histogram(aes(x=num29, color= cat13))
ggplot(df_ML_train) +
geom_histogram(aes(x=num29, fill= cat13))
pairs(df_ML_train)
pairs(df_ML_train[1:10,])
pairs(df_ML_train[1:10,])
pairs(df_ML_train[,1:10])
pairs(df_ML_train[,1:10])
pairs(df_ML_train[,1:3])
pairs(df_ML_train[,1:3], alpha =0.1)
warnings()
library(tidyverse)
library(gmodels)
attach(df_ML)
# Frequency tables
attach(df_ML)
table(cat1, cat2)
prop.table(cat1, cat2)
MLtable <- table(cat1, cat2)
prop.table(MLtable)
options(digits=2)
.
prop.table(MLtable)
#missing value check
is.na.data.frame(df_ML)
#missing value check
summary(df_ML)
ggplot(df_ML_train) +
geom_scatter(aes(x=num29, y=num50, color= cat13))
ggplot(df_ML_train) +
geom_point(aes(x=num29, y=num50, color= cat13))
ggplot(df_ML_train) +
geom_point(aes(x=num29, y=num50, color= num48))
ggplot(df_ML_train) +
geom_point(aes(x=num29, y=num50, color= num48), alpha=0.05)
ggplot(df_ML_train) +
geom_point(aes(x=num29, y=num50, color= num48), alpha=0.1)
ggplot(df_ML_train) +
geom_point(aes(x=num29, y=num50, color= num48), alpha=0.1) +
theme_minimal()
ggplot(df_ML_train) +
geom_point(aes(x=num29, y=num50, color= num48), alpha=0.1) +
theme_grey()
############################################################################
#Exploration#
############################################################################
library(corrplot)
corrplot(df_ML)
dimnames(df_ML)
corrplot(cor(df_ML))
corrplot(cor(df_ML[is.numeric(df_ML)]))
corrplot(cor(which(df_ML[is.numeric(df_ML)])))
num.col <- paste('num',seq(1:59), sep='')
num.col
corrplot(cor(df_ML[num.col]))
log.col <- paste('cat',seq(3:26), sep='')
corrplot(cor(df_ML[num.col[25:59]]))
# num35-42 are strongly correlated with one another
# num44-54 are strongly correlated with one another
# num35-54 have stron negative correlations with num44=54
corrplot(cor(df_ML[num.col[1:30]]))
#Correlation matrix
corrplot(cor(df_ML[num.col]))
# num2 and num8-11 are strongly correlated
# num35-42 are strongly correlated with one another
# num44-54 are strongly correlated with one another
# num35-54 have stron negative correlations with num44=54
# weird negative correlation b/w
corrplot(cor(df_ML[num.col[10:20]]))
#Correlation matrix
corrplot(cor(df_ML[num.col]))
#Correlation matrix
corrplot(cor(df_ML[c(num.col,"target")]))
# num2 and num8-11 are strongly correlated
# num35-42 are strongly correlated with one another
# num44-54 are strongly correlated with one another
# num35-54 have stron negative correlations with num44=54
corrplot(cor(df_ML[c(num.col[10:20],target))) # weird negative correlation b/w num15-17 and num18-20
# num2 and num8-11 are strongly correlated
# num35-42 are strongly correlated with one another
# num44-54 are strongly correlated with one another
# num35-54 have stron negative correlations with num44=54
corrplot(cor(df_ML[c(num.col[10:20],target)])) # weird negative correlation b/w num15-17 and num18-20
# num2 and num8-11 are strongly correlated
# num35-42 are strongly correlated with one another
# num44-54 are strongly correlated with one another
# num35-54 have stron negative correlations with num44=54
corrplot(cor(df_ML[c(num.col[10:20],"target")])) # weird negative correlation b/w num15-17 and num18-20
# num2 and num8-11 are strongly correlated
# num35-42 are strongly correlated with one another
# num44-54 are strongly correlated with one another
# num35-54 have stron negative correlations with num44=54
corrplot.mixed(cor(df_ML[c(num.col[10:20],"target")])) # weird negative correlation b/w num15-17 and num18-20
# Basic plots for exploring if we want them
ggplot(df_ML_train) +
geom_histogram(aes(x=target, fill= cat13))
ggplot(df_ML_train) +
geom_point(aes(x=num29, y=target, color= num48), alpha=0.1) +
theme_grey()
ggplot(df_ML_train) +
geom_point(aes(x=num29, y=target, color= cat2), alpha=0.1) +
theme_grey()
ggplot(df_ML_train) +
geom_point(aes(x=num29, y=target, color= cat1), alpha=0.1) +
theme_grey()
MLtable <- table(cat1, cat2)
prop.table(MLtable)
prop.table(MLtable, 1)
prop.table(MLtable, 2)
prop.table(MLtable)
del(MLtable)
rm(MLtable)
cat.col = c('cat1','cat2','cat3','cat4','cat5','cat6','cat7','cat8','cat9','cat10','cat11','cat12','cat13','cat14','cat15',
'cat16','cat17','cat18','cat19','cat20','cat21','cat22','cat23','cat24','cat25','cat26')
prop.table(MLtable)
print(MAE)
View(MLProjectData)
View(MLProjectData)
dim(df_ML)
seq(1,dim(df_ML)[1])
# Be careful to not include this ID column in anlysis
# I'm only making it to identify any patterns in how this random dataframe was generated
df_ML$ID <- seq(1,dim(df_ML)[1])
df_ML %>%
keep(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_histogram()
# Histograms by variable
df_ML %>%
keep(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_density(aes, fill=df_ML$cat1)
ggplot(df_ML_train) +
geom_histogram(aes(x=target, fill= cat13)) +
facet_wrap(~ cat1, scales = "free")
ggplot(df_ML_train) +
geom_histogram(aes(x=target)) +
facet_wrap(~ cat1, scales = "free")
ggplot(df_ML_train) +
geom_histogram(aes(x=target)) +
facet_wrap(~ cat1)
# Histograms by variable, definitely some numeric columns with the same distributions
df_ML %>%
keep(c(is.numeric, ID)) %>%
gather() %>%
ggplot(aes(y=value)) +
facet_wrap(~ key, scales = "free") +
geom_scatter()
# Histograms by variable, definitely some numeric columns with the same distributions
df_ML %>%
keep(c(is.numeric, "ID")) %>%
gather() %>%
ggplot(aes(y=value)) +
facet_wrap(~ key, scales = "free") +
geom_scatter()
# Histograms by variable, definitely some numeric columns with the same distributions
df_ML %>%
keep(c(is.numeric,"ID")) %>%
gather() %>%
ggplot(aes(x=ID, y=value)) +
facet_wrap(~ key, scales = "free") +
geom_scatter()
# Histograms by variable, definitely some numeric columns with the same distributions
df_ML %>%
keep(c(nom.col, "ID", "target")) %>%
gather() %>%
ggplot(aes(x=ID, y=value)) +
facet_wrap(~ key, scales = "free") +
geom_scatter()
# Histograms by variable, definitely some numeric columns with the same distributions
df_ML %>%
keep(c(num.col, "ID", "target")) %>%
gather() %>%
ggplot(aes(x=ID, y=value)) +
facet_wrap(~ key, scales = "free") +
geom_scatter()
# "ID", "target"
# Histograms by variable, definitely some numeric columns with the same distributions
df_ML %>%
keep(c(num.col)) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_histogram()
# "ID", "target"
# Histograms by variable, definitely some numeric columns with the same distributions
df_ML %>%
keep(num.col) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_histogram()
num.com
num.col
# "ID", "target"
# Histograms by variable, definitely some numeric columns with the same distributions
df_ML %>%
keep(in num.col) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_histogram()
# "ID", "target"
# Histograms by variable, definitely some numeric columns with the same distributions
df_ML %>%
keep(is.numeric) %>%
gather() %>%
ggplot(data=., aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_histogram()
help(keep)
# "ID", "target"
# Histograms by variable, definitely some numeric columns with the same distributions
df_ML %>%
keep(is.numeric) %>%
gather() %>%
ggplot(data=., aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_histogram()
df_ML %>%
keep(is.numeric, list("target")) %>%
gather() %>%
ggplot(data=., aes(x=target, y=value)) +
facet_wrap(~ key, scales = "free") +
geom_scatter()
keep <- is.numeric(df_ML)
del(keep)
rm(keep)
df_ML %>%
keep(c(num.col, "target", "ID")) %>%
gather() %>%
ggplot(data=., aes(x=target, y=value)) +
facet_wrap(~ key, scales = "free") +
geom_scatter()
c(num.col, "target", "ID")
df_ML %>%
keep(list(c(num.col, "target", "ID"))) %>%
gather() %>%
ggplot(data=., aes(x=target, y=value)) +
facet_wrap(~ key, scales = "free") +
geom_scatter()
df_ML %>%
keep(list(c(num.col, "target", "ID"))) %>%
# gather() %>%
# ggplot(data=., aes(x=target, y=value)) +
# facet_wrap(~ key, scales = "free") +
# geom_scatter()
############################################################################
#Random Forest#
############################################################################
# Assign Random Forest Model
library(randomForest)
df_ML %>%
keep(list(c(num.col, "target", "ID"))) %>%
gather() # %>%
df_ML %>%
keep(num.col))) %>%
gather() # %>%
df_ML %>%
keep(num.col) %>%
gather() # %>%
df_ML %>%
keep(num.col) # %>%
df_ML %>%
keep(list(num.col)) # %>%
df_ML %>%
select(which(sapply(.,class)=="numeric"),target,ID) # %>%
df_ML %>%
select(which(sapply(.,class)=="numeric"),target,ID) %>%
gather() %>%
ggplot(data=., aes(x=target, y=value)) +
facet_wrap(~ key, scales = "free") +
geom_scatter()
df_ML %>%
select(which(sapply(.,class)=="numeric"),target,ID) %>%
gather() %>%
ggplot(data=., aes(x=target, y=value)) +
facet_wrap(~ key, scales = "free") +
geom_point()
df_ML %>%
select(which(sapply(.,class)=="numeric"),target,ID) %>%
gather() #%>%
df_ML %>%
select(which(sapply(.,class)=="numeric"),target,ID) %>%
gather() #%>%
df_ML %>%
select(which(sapply(.,class)=="numeric"),target,ID) %>%
gather()
df_ML %>%
select(which(sapply(.,class)=="numeric"),target,ID) %>%
gather() %>%
ggplot(data=., aes(x=target, y=value)) +
facet_wrap(~ key, scales = "free") +
geom_point()
df_ML %>%
select(which(sapply(.,class)=="numeric"),target,ID) %>%
gather() %>%
ggplot(data=., aes(y=value)) +
facet_wrap(~ ID, scales = "free") +
geom_point()
df_ML %>%
select(which(sapply(.,class)=="numeric"),target,ID) %>%
gather() %>%
ggplot(data=id, aes(x=ID, y=value)) +
facet_wrap(~ key, scales = "free") +
geom_point()
